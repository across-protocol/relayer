# Amount of time to wait (in seconds) between bot loops. This can be set to 0 to
# run once and exit, which is useful for test, or when operating via an
# automation framework like cron or Google's Cloud Scheduler.
POLLING_DELAY=60


# Wallet details. Exercise *extreme* caution with these - key theft will likely
# result in loss of funds.
# Uncomment and the configure desired variable, and use the following runtime
# argument to specify which should be used:
#
#   --wallet <mnemonic|privateKey>
#
#MNEMONIC="your twelve or twenty four word seed phrase..."
#PRIVATE_KEY=0xabc123...


# Uncomment and configure these RPC endpoints. It's recommended to use a
# dedicated private RPC, or one of the large infrastructure providers (i.e.
# Alchemy, Infura, ...).
#NODE_URL_1=<Ethereum-Mainnet-RPC-URL>
#NODE_URL_10=<Optimism-RPC-URL>
#NODE_URL_137=<Polygon-RPC-URL>
#NODE_URL_288=<Boba-RPC-URL>
#NODE_URL_42161=<Arbitrum-RPC-URL>


# Configure whether the bot will actively try to send relays or not. Note that
# the bot will currently still attempt token approvals if they are missing -
# even when relaying is disabled - but will not attempt to perform any relays
# thereafter.
#
# It's strongly recommended to initially test this bot with SEND_RELAYS=false
# in order to validate the configuration and behaviour of the bot. Set
# SEND_RELAYS=true later when comfortable that the behaviour as intended.
#SEND_RELAYS=false


# A Redis in-memory DB can drastically speed up the performance of the bot.
# This is technically not required, but can reduce the instance of repeated
# RPC queries and therefore reduces the time and network bandwidth required
# for successful relay bot operation.
#
# Install redis and then ensure that redis-server is started:
#     https://redis.io/docs/getting-started/
# Under the hood, the relayer will cache JSON-rpc request data from requests
# like `eth_getBlock` in the Redis DB.
REDIS_URL="redis://127.0.0.1:6379"


############################ ADVANCED CONFIGURATION ############################
# Note: This section is intended for advanced users only. It's strongly
# recommended to consult with the Across development team before making any
# changes to this section.


# List of destination chains to be supported by the relayer. If set to a
# non-empty list, only transfers going to these chains will be filled. For
# example, if set to [1], only transfers destined for Ethereum will be filled.
#RELAYER_DESTINATION_CHAINS=[1,10,137,288,42161]


# List of networks to monitor for deposit and fill events. This defaults to all
# all chains and shouldn't be updated unless:
#   (1) a network is down, or
#   (2) you want to explicitly skip all deposits from an origin chain.
# Note that this should not be used to skip deposits going TO a specific chain.
# RELAYER_DESTINATION_CHAINS should be used in that case instead.
#CONFIGURED_NETWORKS=[1,10,137,288,42161]


# List of tokens that the relayer supports. These are addresses on Ethereum
# mainnet. For example, if only USDC's address is specified, the relayer
# will only fill USDC transfers on the configured destination chains. If
# RELAYER_TOKENS is not set, or is set to [], the relayer will relay for any
# token that it holds a balance of. The bot internally identifies the
# corresponding L2/side chain contract address based on the L1 contract
# address.
#RELAYER_TOKENS=[]


# How many blocks to look back per request for a chain. Relayer code will bundle
# requests, so a lower number implies that there will be more requests to the
# RPC endpoint. This implies more request overhead and therefore impacts the
# speed at which the bot can operate. Some RPCs, like Infura, limit lookback to
# fixed number of blocks. The example configuration below is also the default
# behaviour of the bot and is known to work with Infura and Alchemy.
#MAX_BLOCK_LOOK_BACK='{ "1": 20000, "10": 20000, "137": 3499, "288": 4990, "42161": 99990 }'


# How many blocks to query for Deposit events to be filled. This can be reduced
# to send fewer requests to the RPC endpoint, improving the speed of the bot and
# reducing RPC load, but means that Deposit events will be visible to the
# relayer for a shorter period of time. The default lookback ranges below
# contain approximately 6 hours of blocks for each network, which should be fine
# for most third-party relayers
#MAX_RELAYER_DEPOSIT_LOOK_BACK='{ "1": 1800, "10": 43200, "137": 8640, "288": 720, "42161": 43200 }'


# MIN_DEPOSIT_CONFIRMATIONS protects against Deposit reordering by by requiring
# a minimum Deposit age (block depth) before it will be accepted for a fill. The
# top-level keys (100, 1000) define the maximum USD-value of a Deposit that will
# be accepted. For example, for a Deposit on Ethereum worth up to $100 USD, the
# minimum number of confirmations is 16. Thereafter, a Deposit of up to $1000
# requires a minimum of 32 confirmations would be required. Above the highest-
# specified USD amount, the default finalization criteria is applied:
#
#   Ethereum: 64 blocks
#   Optimism: 0 blocks
#   Polygon: 128 blocks
#   Boba: 0 blocks
#   Arbitrum: 0 blocks
#
# Relayer bot operators can adjust the volume thresholds and/or number of
# minimum deposit confirmations in order to tune their potential risk/return.
# Note however that if the relayer fills a Deposit event that is later re-
# ordered due to a fork or re-org on the origin/source chain, then the relayer
# will not be refunded for the fill and will therefore lose funds.
#MIN_DEPOSIT_CONFIRMATIONS='{
#  100: {
#      1: 16,
#      10: 0,
#      137: 100,
#      288: 0,
#      42161: 0,
#  },
#  1000: {
#    1: 32,
#    10: 0,
#    137: 100,
#    288: 0,
#    42161: 0,
#  },
#}'


# This inventory config will be explained in greater detail in a separate
# section, but generally this informs the relayer how it should rebalance token
# inventories across chains. The following simple example tells the bot that it
# should target holding 8% of its WETH on chain 10, 8% on chain 42161, 8% on
# on chain 137, 0.2% on chain 288, and the remainder on Mainnet. The config can
# also be used to specify how much ETH versus WETH to hold.
#RELAYER_INVENTORY_CONFIG='{
#  "tokenConfig": {
#    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": {
#      "1": {
#        "targetPct": 100, "thresholdPct": 100,
#        "unwrapWethThreshold": 3.5, "unwrapWethTarget": 5,
#      },
#      "10": {
#        "targetPct": 8, "thresholdPct": 5,
#        "unwrapWethThreshold": 0.75, "unwrapWethTarget": 1.5,
#      },
#      "137": {
#        "targetPct": 8, "thresholdPct": 5,
#      },
#      "288": {
#        "targetPct": 0.2, "thresholdPct": 0.1,
#        "unwrapWethThreshold": 0.65, "unwrapWethTarget": 1,
#      },
#      "42161": {
#        "targetPct": 8, "thresholdPct": 5,
#        "unwrapWethThreshold": 0.75, "unwrapWethTarget": 1.5,
#      },
#    },
#  },
#}'


# Backup provider endpoints. Should contain all endpoints in 'Provider
# endpoints", plus additional endpoints for redundancy.
#NODE_URLS_1=[<Mainnet-Node-URL>,<Mainnet-Node-URL-2>]
#NODE_URLS_10=[<Optimism-Node-URL>,<Optimism-Node-URL-2>]
#NODE_URLS_137=[<Polygon-Node-URL>,<Polygon-Node-URL-2>]
#NODE_URLS_288=[<Boba-Node-URL>,<Boba-Node-URL-2>]
#NODE_URLS_42161=[<Arbitrum-Node-URL>,<Arbitrum-Node-URL-2>]

# Defaults to 1, must be set >= 1. If set > 1, then for any RPC request, this
# requires that at least this count of RPCs specified in the NODE_URLS_[ID] list
# list return the exact same response. We recommend setting this to 2 so that
# the relayer does not accidentally relay a deposit whose properties two RPCs
# disagree about. This edge case is rare but could lead to loss of funds.
#NODE_QUORUM_THRESHOLD=2
