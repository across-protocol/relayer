{
  "language": "Solidity",
  "sources": {
    "contracts/AtomicWethDepositor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.13;\n\ninterface Weth {\n    function withdraw(uint256 _wad) external;\n\n    function transferFrom(address _from, address _to, uint256 _wad) external;\n}\n\ninterface OvmL1Bridge {\n    function depositETHTo(address _to, uint32 _l2Gas, bytes calldata _data) external payable;\n}\n\ninterface PolygonL1Bridge {\n    function depositEtherFor(address _to) external payable;\n}\n\n/**\n * @notice Contract deployed on Ethereum helps relay bots atomically unwrap and bridge WETH over the canonical chain\n * bridges for Optimism, Boba and Polygon. Needed as these chains only support bridging of ETH, not WETH.\n */\n\ncontract AtomicWethDepositor {\n    Weth public immutable weth = Weth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    OvmL1Bridge public immutable optimismL1Bridge = OvmL1Bridge(0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1);\n    OvmL1Bridge public immutable bobaL1Bridge = OvmL1Bridge(0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00);\n    OvmL1Bridge public immutable baseL1Bridge = OvmL1Bridge(0x3154Cf16ccdb4C6d922629664174b904d80F2C35);\n    PolygonL1Bridge public immutable polygonL1Bridge = PolygonL1Bridge(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\n\n    function bridgeWethToOvm(address to, uint256 amount, uint32 l2Gas, uint256 chainId) public {\n        weth.transferFrom(msg.sender, address(this), amount);\n        weth.withdraw(amount);\n\n        if (chainId == 10) {\n            optimismL1Bridge.depositETHTo{ value: amount }(to, l2Gas, \"\");\n        } else if (chainId == 8453) {\n            baseL1Bridge.depositETHTo{ value: amount }(to, l2Gas, \"\");\n        } else if (chainId == 288) {\n            bobaL1Bridge.depositETHTo{ value: amount }(to, l2Gas, \"\");\n        }\n\n        revert(\"Invalid chainId\");\n    }\n\n    function bridgeWethToPolygon(address to, uint256 amount) public {\n        weth.transferFrom(msg.sender, address(this), amount);\n        weth.withdraw(amount);\n        polygonL1Bridge.depositEtherFor{ value: amount }(to);\n    }\n\n    fallback() external payable {}\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
