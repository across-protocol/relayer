version: 2.1
jobs:
  install:
    docker:
      - image: cimg/node:20.19.2
    working_directory: ~/relayer-v2
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - cache-node-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: cache-node-v1-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  test:
    docker:
      - image: cimg/node:20.19.2
    working_directory: ~/relayer-v2
    resource_class: medium+
    parallelism: 20
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - cache-node-v1-{{ checksum "yarn.lock" }}
      
      # Extract Solana version from across-protocol/contracts
      - run:
          name: Extract Solana version
          command: |
            set -euo pipefail

            REPO="across-protocol/contracts"
            REF="master"

            if [[ -n "${OVERRIDE_SOLANA_VERSION:-}" ]]; then
              SOLANA_VERSION="${OVERRIDE_SOLANA_VERSION}"
            else
              # Clone the contracts repository to get Cargo.lock
              git clone --depth 1 --branch $REF https://github.com/$REPO.git /tmp/contracts
              cd /tmp/contracts

              if [[ -f Cargo.lock ]]; then
                EXTRACTED_VERSION=$(grep -A2 'name = "solana-program"' Cargo.lock \
                                   | grep 'version' | head -n1 | cut -d'"' -f2 || echo "")
                if [[ -n "$EXTRACTED_VERSION" ]]; then
                  VERSION_NUMBER=$(echo "$EXTRACTED_VERSION" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "")
                  if [[ -n "$VERSION_NUMBER" ]]; then
                    SOLANA_VERSION="$VERSION_NUMBER"
                  fi
                fi
              fi
            fi

            echo "Using Solana version: $SOLANA_VERSION"
            echo "export SOLANA_VERSION=$SOLANA_VERSION" >> $BASH_ENV
            
      # Install Solana CLI
      - run:
          name: Install Solana CLI
          command: |
            source $BASH_ENV
            sh -c "$(curl -sSfL https://release.solana.com/v${SOLANA_VERSION}/install)"
            echo 'export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"' >> $BASH_ENV
            
      - run:
          name: Run build
          command: yarn build
      - run:
          name: Run tests
          command: |
            source $BASH_ENV
            circleci tests glob "test/**/*.ts" | circleci tests split > /tmp/test-files
            yarn test --bail $(cat /tmp/test-files)
  lint:
    docker:
      - image: cimg/node:20.19.2
    working_directory: ~/relayer-v2
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - cache-node-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Run lint
          command: yarn lint
workflows:
  version: 2.1
  build_and_test:
    jobs:
      - install
      - test:
          requires:
            - install
      - lint:
          requires:
            - install
